import type { Booleanish, ColorVariant, TableField, TableFieldObject, TableItem, VerticalAlign } from '../../types';
declare const _sfc_main: import("vue").DefineComponent<{
    align: {
        type: null;
        required: false;
    };
    caption: {
        type: StringConstructor;
        required: false;
    };
    captionTop: {
        type: null;
        required: false;
        default: boolean;
    };
    borderless: {
        type: null;
        required: false;
        default: boolean;
    };
    bordered: {
        type: null;
        required: false;
        default: boolean;
    };
    borderVariant: {
        type: null;
        required: false;
    };
    dark: {
        type: null;
        required: false;
        default: boolean;
    };
    fields: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    footClone: {
        type: null;
        required: false;
        default: boolean;
    };
    hover: {
        type: null;
        required: false;
        default: boolean;
    };
    items: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    responsive: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    small: {
        type: null;
        required: false;
        default: boolean;
    };
    striped: {
        type: null;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
    };
    sortBy: {
        type: StringConstructor;
        required: false;
    };
    sortDesc: {
        type: BooleanConstructor;
        required: false;
    };
    sortInternal: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}, {
    props: {
        align?: VerticalAlign | undefined;
        caption?: string | undefined;
        captionTop: Booleanish;
        borderless: Booleanish;
        bordered: Booleanish;
        borderVariant?: ColorVariant | undefined;
        dark: Booleanish;
        fields: Array<TableField>;
        footClone: Booleanish;
        hover: Booleanish;
        items: Array<TableItem>;
        responsive: boolean | 'sm' | 'md' | 'lg' | 'xl' | 'xxl';
        small: Booleanish;
        striped: Booleanish;
        variant?: ColorVariant | undefined;
        sortBy?: string | undefined;
        sortDesc?: boolean | undefined;
        sortInternal: boolean;
    };
    emits: (event: "update:sortBy" | "update:sortDesc" | "sorted", ...args: any[]) => void;
    captionTopBoolean: import("vue").ComputedRef<boolean>;
    borderlessBoolean: import("vue").ComputedRef<boolean>;
    borderedBoolean: import("vue").ComputedRef<boolean>;
    darkBoolean: import("vue").ComputedRef<boolean>;
    footCloneBoolean: import("vue").ComputedRef<boolean>;
    hoverBoolean: import("vue").ComputedRef<boolean>;
    smallBoolean: import("vue").ComputedRef<boolean>;
    stripedBoolean: import("vue").ComputedRef<boolean>;
    classes: import("vue").ComputedRef<(string | {
        [x: string]: boolean;
        'table-striped': boolean;
        'table-hover': boolean;
        'table-dark': boolean;
        'table-bordered': boolean;
        'table-borderless': boolean;
        'table-sm': boolean;
        'caption-top': boolean;
    })[]>;
    itemHelper: {
        normaliseFields: (origFields: TableField<Record<string, unknown>>[], items: TableItem<Record<string, unknown>>[]) => TableFieldObject<Record<string, unknown>>[];
        sortItems: (fields: TableField<Record<string, unknown>>[], items: TableItem<Record<string, any>>[], sort?: {
            key?: string | undefined;
            desc?: boolean | undefined;
        } | undefined) => TableItem<Record<string, any>>[];
    };
    computedFields: import("vue").ComputedRef<TableFieldObject<Record<string, unknown>>[]>;
    computedItems: import("vue").ComputedRef<TableItem<Record<string, unknown>>[]>;
    responsiveClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
        'table-responsive': boolean;
    }>;
    isSortable: import("vue").ComputedRef<boolean>;
    columnClicked: (field: TableField<Record<string, unknown>>) => void;
    getFieldColumnClasses: (field: TableFieldObject) => (string | string[] | {
        'b-table-sortable-column': boolean | undefined;
    } | undefined)[];
    BTableContainer: import("vue").DefineComponent<{
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        responsiveClasses: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        responsive: {
            type: (StringConstructor | BooleanConstructor)[];
            required: false;
            default: boolean;
        };
        responsiveClasses: {
            type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
            required: false;
        };
    }>>, {
        responsive: string | boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:sortBy" | "update:sortDesc" | "sorted")[], "update:sortBy" | "update:sortDesc" | "sorted", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    align: {
        type: null;
        required: false;
    };
    caption: {
        type: StringConstructor;
        required: false;
    };
    captionTop: {
        type: null;
        required: false;
        default: boolean;
    };
    borderless: {
        type: null;
        required: false;
        default: boolean;
    };
    bordered: {
        type: null;
        required: false;
        default: boolean;
    };
    borderVariant: {
        type: null;
        required: false;
    };
    dark: {
        type: null;
        required: false;
        default: boolean;
    };
    fields: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    footClone: {
        type: null;
        required: false;
        default: boolean;
    };
    hover: {
        type: null;
        required: false;
        default: boolean;
    };
    items: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    responsive: {
        type: (StringConstructor | BooleanConstructor)[];
        required: false;
        default: boolean;
    };
    small: {
        type: null;
        required: false;
        default: boolean;
    };
    striped: {
        type: null;
        required: false;
        default: boolean;
    };
    variant: {
        type: null;
        required: false;
    };
    sortBy: {
        type: StringConstructor;
        required: false;
    };
    sortDesc: {
        type: BooleanConstructor;
        required: false;
    };
    sortInternal: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>> & {
    "onUpdate:sortBy"?: ((...args: any[]) => any) | undefined;
    "onUpdate:sortDesc"?: ((...args: any[]) => any) | undefined;
    onSorted?: ((...args: any[]) => any) | undefined;
}, {
    small: any;
    dark: any;
    items: unknown[];
    hover: any;
    striped: any;
    bordered: any;
    borderless: any;
    captionTop: any;
    responsive: string | boolean;
    fields: unknown[];
    footClone: any;
    sortDesc: boolean;
    sortInternal: boolean;
}>;
export default _sfc_main;
